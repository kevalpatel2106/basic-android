apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply from: '../gradle/config.gradle'
apply from: '../gradle/deps.gradle'


android {
    signingConfigs {
        //This are th play store signing config.
        playStore {
            if (System.getenv("IS_CI_BUILD").equals("true")) {
                //It is CI build, load it from the environment variables.
                //See circle.yml file.
                storeFile file(System.getenv("KEY_STORE"))
                storePassword System.getenv("KEY_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("ALIAS_PASSWORD")
            } else {
                //If this is the local build, load it from the keystore.properties file
                File signFile = rootProject.file('./misc/keystore.properties')
                if (signFile.exists()) {
                    Properties props = new Properties()
                    props.load(new FileInputStream(signFile))

                    keyAlias props['keystore.alias']
                    keyPassword props['keystore.password']
                    storeFile file(props['keystore.file'])
                    storePassword props['keystore.aliaspassword']
                } else {
                    throw new GradleException("keystore.properties file not found.")
                }
            }
        }
    }

    compileSdkVersion buidlConfig.compile
    buildToolsVersion buidlConfig.buildToolVersion

    compileOptions {
        sourceCompatibility javaCompatibility.sourceCompatibility
        targetCompatibility javaCompatibility.targetCompatibility
    }

    defaultConfig {
        applicationId buidlConfig.applicationId

        //sdks
        minSdkVersion buidlConfig.min
        targetSdkVersion buidlConfig.target

        //Version config
        versionCode versionConfig.versionCode
        versionName versionConfig.versionName

        //strip other than english resources
        resConfigs "en"

        testInstrumentationRunner "com.kevalpatel2106.baseapplication.testUtils.CustomTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardConfig.proguardPath
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            signingConfig signingConfigs.playStore
            pseudoLocalesEnabled false
            zipAlignEnabled true
        }
        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable false
            signingConfig signingConfigs.playStore
            minifyEnabled false
            zipAlignEnabled true
        }
    }

    packagingOptions packageExcludes

    lintOptions {
        abortOnError false
    }

    dexOptions {
        preDexLibraries true
    }

    aaptOptions {
        cruncherEnabled false
    }
}

// Grant animation permissions to avoid test failure because of ui sync.
task grantAnimationPermissions(type: Exec, dependsOn: 'installMock') {
    group = 'test'
    description = 'Grant permissions for testing.'

    def absolutePath = file('..') // Get project absolute path
    commandLine "$absolutePath/misc/set_animation_permissions.sh org.bookdash.android".split(" ")
}

// Source: http://stackoverflow.com/q/29908110/112705
afterEvaluate {
    // When launching individual tests from Android Studio, it seems that only the assemble tasks
    // get called directly, not the install* versions
    tasks.each { task ->
        if (task.name.startsWith('assembleMockAndroidTest')) {
            task.dependsOn grantAnimationPermissions
        }
    }
}

// Test Logging
tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}

dependencies {
    implementation ide.kotlin
    implementation ide.constrainlayout

    implementation ide.kotlin
    implementation ide.constrainlayout

    //Testing
    testImplementation testLib.junit
    androidTestImplementation(testLib.rules, excludeGrp)
    androidTestImplementation(testLib.esspresso, excludeGrp)
    androidTestImplementation(testLib.runner, excludeGrp)
    androidTestImplementation(testLib.esspressoIntents, excludeGrp)
    androidTestImplementation(testLib.contrib, excludeGrp)
    androidTestImplementation(testLib.idling, excludeGrp)
    androidTestImplementation(testLib.uiAutomator, excludeGrp)
    androidTestImplementation(testLib.mokitoCore, excludeGrp)
    androidTestImplementation(testLib.mokitoAndroid, excludeGrp)
    androidTestImplementation(testLib.mockWebServer, excludeGrp)

    //Butter knife
    implementation butterKnifeLib.butterKnife
    annotationProcessor butterKnifeLib.annotationProcessor

    //GSON
    implementation otherLib.gson
    implementation(otherLib.glide, excludeGrp)
    implementation(otherLib.timber, excludeGrp)
    debugImplementation(otherLib.shetho, excludeGrp)
    debugImplementation(otherLib.shethoOkhttp, excludeGrp)

    //Retrofit
    implementation retrofitLib.retrofit
    implementation retrofitLib.gsonPlugin
    implementation retrofitLib.rxPlugin
    implementation retrofitLib.logger

    //Support
    implementation supportLib.appCompat
    implementation supportLib.recyclerView
    implementation supportLib.cardView
    implementation supportLib.design

    //Rx
    implementation rxLib.rxJava
    implementation rxLib.rxAndroid
}

